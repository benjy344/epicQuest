# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/

$introScreen  = null
donjon        = null
$starBtn      = null
$rooms        = null
$interactives = null
$nextRoomBtn  = null
$prevRoomBtn  = null
$addItem      = null
$rooms        = $('body').find( '.js-room' )
$enterFight   = $rooms.find( '.js-get-fight' )
$fightplace   = $('body').find( '.js-fightplace' )

GlobalMonsters = []



if !Window.fightplace? && $('#fightplace').length > 0
	Window.fightplace = new Vue
		el: '#fightplace'
		data:
			visible: false
			donjon: []
			avatar: {}
			avatarItems: []
			monster: {}
			sword:{}
			armor:{}
			shield:{}
			monsterMaxHp: 0
			round: false
			monsterDead: false
			restGold: true
		mounted: () ->
			this.loadData()
		methods:
			loadData: (cb) ->
				console.log 'load fightplace data'
				_this = this
				$.ajax
					url: '/donjons/'+$('.js-donjon').attr('data-donjon-id')+'.json'
					success: (res) ->
						_this.donjon      = JSON.parse(JSON.stringify(res))
						_this.avatar      = JSON.parse(JSON.stringify(res.avatar))
						_this.avatarItems = JSON.parse(JSON.stringify(res.avatarItems))
						for item in _this.avatarItems
							switch item.id
								when _this.avatar.id_sword  then _this.sword  = item
								when _this.avatar.id_shield then _this.shield = item
								when _this.avatar.id_armor  then _this.armor  = item
						if _this.avatar.id_sword is null
							_this.sword  = {}
						if _this.avatar.id_shield is null
							_this.shield = {}
						if _this.avatar.id_armor is null
							_this.armor  = {}
						cb() if cb? && typeof cb is "function"
						_this.$forceUpdate()

			setMonster: (id) ->
				_this = this
				_this.loadData ()->
					_this.visible = true
					console.log _this.donjon.monsters
					for monster, index in _this.donjon.monsters when parseInt(monster.id) is parseInt(id)
						_this.monster      = monster
						_this.monsterMaxHp = _this.monster.hp
						_this.restGold     = true if (_this.monster.gold? && _this.monster.gold>0)

			renderAvatar: ->
				url = window.location.origin+'/majAvatar?MaxHealth='+this.avatar.MaxHealth+'&hp='+this.avatar.hp+'&level='+this.avatar.level+'&nextLevel='+this.avatar.nextLevel+'&defence='+this.avatar.defence+'&agility='+this.avatar.agility+'&force='+this.avatar.force+'&inteligence='+this.avatar.inteligence+'&exp='+this.avatar.exp
				$.get
				  url: url
				  dataType: "script"

			closeFightPlace: ->
				this.visible = false
				checkRoomMonster()

			openInventory: ->
				Window.inventory.toggle(true)

			getAgility: ->
				agility = avatar.agility if avatar?
				if sword? && sword.agility?
					agility += sword.agility
				if shield? && shield.agility?
					agility += shield.agility
				if armor? && armor.agility?
					agility += armor.agility

				return agility

			getForce: ->
				force = avatar.force
				if sword? && sword.force?
					force += sword.force
				if shield? && shield.force?
					force += shield.force
				if armor? && armor.force?
					force += armor.force

				return force

			gainExp: ->
				this.avatar.exp += this.monster.exp

				if this.avatar.exp >= this.avatar.nextLevel then this.levelUp()

			getGold: ->
				url = window.location.origin+'/addGold?gold='+this.monster.gold
				this.restGold = false
				$.get
				  url: url

			levelUp: ->
				this.avatar.level += 1
				this.avatar.exp = this.avatar.exp - this.avatar.nextLevel
				this.avatar.nextLevel += (this.avatar.nextLevel*1.5)
				switch this.avatar.job_id
					when 1 # Thief
						this.avatar.MaxHealth   += 3
						this.avatar.hp          += 3
						this.avatar.force       += 2
						this.avatar.agility     += 4
						this.avatar.inteligence += 3
						this.avatar.defence     += 2

						switch (this.avatar.level)
							when 1
								console.log 'maybe some special skills??'

					when 2 # Sentinel
						this.avatar.MaxHealth   += 4
						this.avatar.hp          += 4
						this.avatar.force       += 5
						this.avatar.agility     += 2
						this.avatar.inteligence += 2
						this.avatar.defence     += 4
					when 3 # Mage
						this.avatar.MaxHealth   += 5
						this.avatar.hp          += 5
						this.avatar.force       += 3
						this.avatar.agility     += 3
						this.avatar.inteligence += 3
						this.avatar.defence     += 3
				if this.avatar.exp >= this.avatar.nextLevel then this.levelUp()


			percentHp: (value, valMax) ->
				result =  if value > 0 then (value*100)/valMax else 0
				return result

			win: ->
				this.gainExp()
				this.renderAvatar()
				for monster in GlobalMonsters when monster.id is this.monster.id
					monster.isDead = true
				_this = this
				setTimeout ->
					_this.round = false
					_this.monsterDead = true
				, 1000


			gameOver: () ->
				window.location.href = "/gameover"
			attack: () ->
				this.round = true
				force         = if this.sword.force? then this.avatar.force + this.sword.force else this.avatar.force
				avatarDefence = this.avatar.defence
				if this.shield.defence? then avatarDefence += this.shield.defence
				if this.armor.defence? then avatarDefence += this.armor.defence

				if this.avatar.agility >= this.monster.agility
					#si l'avatar est le plus rapide
					#attaque le monstre
					if ( Math.round( this.monster.hp - (force - (this.monster.defence / 2))) < this.monster.hp  )
						this.monster.hp = Math.round( this.monster.hp - (force - (this.monster.defence / 2)))

					else
						this.monster.hp = this.monster.hp - 1

					if (this.monster.hp <= 0)
						#si le montre est KO => avatar WIN
						this.monster.hp = 0
						this.win()
					else
						#si le montre n'est pas KO, il attaque
						if ( Math.round( this.avatar.hp - (this.monster.force - (avatarDefence / 2))) < this.avatar.hp  )
							this.avatar.hp = Math.round( this.avatar.hp - (this.monster.force - (avatarDefence / 2)))
						else
							this.avatar.hp = this.avatar.hp - 1


						if (this.avatar.hp <= 0)
							this.avatar.hp = 0
							this.renderAvatar()
							#si l'avatar est KO => avatar loose
							this.gameOver()
						else
							#l'avatar n'est pas mort, le combat continue
							this.renderAvatar()
							_this = this
							setTimeout ->
								_this.round = false
							, 1000
				enterFight: ()->
					$fightplace.addClass('visible')


if $enterFight.length && $fightplace.length
	$enterFight.off('click')
	$enterFight.on 'click', ()->

		$fightplace.addClass('visible')
		$this   = $(this)
		monster = JSON.parse($this.attr('data-monster'))
		Window.fightplace.setMonster(monster.id)
		setTimeout ->
			$this.parents('.js-interactive-monster').remove()
		, 1000


$introScreen  = $('body').find( '.titleScreen' )
$starBtn      = $introScreen.find( '.js-start' )
$rooms        = $('body').find( '.js-room' )
$nextRoomBtn  = $rooms.find( '.js-next-room' )
$prevRoomBtn  = $rooms.find( '.js-prev-room' )



skipIntro = (e) ->
	$introScreen.css {'display': 'none'}
	checkRoomMonster()

toggleTooltip = (e) ->
	if !$(this).hasClass 'tooltip-active'
		$interactives.removeClass 'tooltip-active'
		$(this).toggleClass 'tooltip-active'
	else
		$(this).toggleClass 'tooltip-active'

ChangeRoom = (e) ->
	$trigger = $(this)
	$target  = $('.js-room-'+$trigger.attr('data-next'))

	if $target.length > 0
		$rooms.removeClass 'active'
		$target.addClass 'active'
		checkRoomMonster()

checkRoomMonster = ()->
	GlobalMonsters = []
	$('.active.js-room').find('.js-interactive-monster').each (el,index)->
		GlobalMonsters.push index
	if GlobalMonsters.length is 0
		$('.active.js-room').find('.finish, .js-next-room').removeClass('hidden-stairs').addClass('visible-stairs')
		$('.active.js-room').find('.stairs-closed').removeClass('visible-stairs').addClass('hidden-stairs')

if $starBtn.length
	$starBtn.off('click')
	$starBtn.on('click', skipIntro )

if $nextRoomBtn.length
	$nextRoomBtn.off('click')
	$nextRoomBtn.on('click', ChangeRoom )


if $prevRoomBtn.length
	$prevRoomBtn.off('click')
	$prevRoomBtn.on('click', ChangeRoom )

